|****************************************************************************
| Echo_Z80Request
| Requests the Z80 bus
|****************************************************************************

.macro Echo_Z80Request
    move.w  #0x100, (0xA11100)        | Request Z80 bus
1:
    btst.b  #0, (0xA11100)           | Did we get it yet?
    bne.s   1b         | Keep waiting
.endm                            | End of macro

|****************************************************************************
| Echo_Z80Release
| Releases the Z80 bus
|****************************************************************************

.macro Echo_Z80Release
    move.w  #0x000, (0xA11100)        | Release Z80 bus
.endm                            | End of macro

|****************************************************************************
| Echo_Z80Reset
| Resets the Z80 and YM2612
|****************************************************************************

.macro Echo_Z80Reset
    move.w  #0x000, (0xA11200)        | Assert reset line
    .rept    0x10                     | Wait until hardware resets
    nop                               | ...
    .endr                              | ...
    move.w  #0x100, (0xA11200)        | Release reset line
.endm                            | End of macro

|****************************************************************************
| Echo_SendCommand
| Sends an Echo command (no address parameter)
|
| input %d0.b ... Echo command
|****************************************************************************

Echo_SendCommand:
    move.w  %d1, -(%sp)               | Save register

    Echo_Z80Request                 | We need the Z80 bus

1:
    tst.b   (0xA01FFF)               | Check if Echo is ready
    beq.s   2f                  | Too busy?
    Echo_Z80Release                   | Let Echo continue
    move.w  #0xFF, %d1                  | Give it some time
0:
    dbf     %d1, 0b                       | ...
    Echo_Z80Request                   | Get Z80 bus back
    bra.s   1b                      | Try again

2:
    move.b  %d0, (0xA01FFF)           | Write command ID
    Echo_Z80Release                 | We're done with the Z80 bus

    move.w  (%sp)+, %d1               | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_SendCommandAddr
| Sends an Echo command (with address parameter)
|
| input %d0.b ... Echo command
| input %a0.l ... Address parameter
|****************************************************************************

Echo_SendCommandAddr:
Echo_SendCommandEx:
    movem.l %d0-%d1, -(%sp)            | Save register

    Echo_Z80Request                 | We need the Z80 bus

1:
    tst.b   (0xA01FFF)               | Check if Echo is ready
    beq.s   2f                  | Too busy?
    Echo_Z80Release                   | Let Echo continue
    move.w  #0xFF, %d1                  | Give it some time
0:
    dbf     %d1, 0b                       | ...
    Echo_Z80Request                   | Get Z80 bus back
    bra.s   1b                      | Try again

2:
    move.b  %d0, (0xA01FFF)           | Write command ID

    move.l  %a0, %d0                  | Easier to manipulate here
    move.b  %d0, (0xA01FFD)           | Store low address byte
    lsr.l   #7, %d0                  | Get high address byte
    lsr.b   #1, %d0                    | We skip one bit
    bset.l  #7, %d0                    | Point into bank window
    move.b  %d0, (0xA01FFE)           | Store high address byte

    lsr.w   #8, %d0                  | Get bank byte
    move.w  %d0, %d1                    | Parse 32X bit separately
    lsr.w   #1, %d1                    | Put 32X bit in place
    and.b   #0x7F, %d0                  | Filter out unused bit from addresses
    and.b   #0x80, %d1                  | Filter out all but 32X bit
    or.b    %d1, %d0                    | Put everything together
    move.b  %d0, (0xA01FFC)           | Store bank byte

    Echo_Z80Release                 | We're done with the Z80 bus

    movem.l (%sp)+, %d0-%d1            | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_SendCommandByte
| Sends an Echo command (with a byte parameter)
|
| input %d0.b ... Echo command
| input %d1.b ... Byte parameter
|****************************************************************************

Echo_SendCommandByte:
    Echo_Z80Request                 | We need the Z80 bus

    move.w  %d1, -(%sp)               | Save register
1:
    tst.b   (0xA01FFF)               | Check if Echo is ready
    beq.s   2f                  | Too busy?
    Echo_Z80Release                   | Let Echo continue
    move.w  #0xFF, %d1                  | Give it some time
0:
    dbf     %d1, 0b                       | ...
    Echo_Z80Request                   | Get Z80 bus back
    bra.s   1b                      | Try again

2:
    move.w  (%sp)+, %d1               | Restore register
    move.b  %d0, (0xA01FFF)           | Write command ID
    move.b  %d1, (0xA01FFC)           | Write parameter
    Echo_Z80Release                 | We're done with the Z80 bus

    rts                             | End of subroutine

|****************************************************************************
| Echo_PlaySFX
| Plays a SFX
|
| input %a0.l ... Pointer to SFX data
|****************************************************************************

Echo_PlaySFX:
    move.w  %d0, -(%sp)               | Save register
    move.b  #0x02, %d0                | Command 0x02 = play SFX
    bsr     Echo_SendCommandAddr    | Send command to Echo
    move.w  (%sp)+, %d0               | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_StopSFX
| Stops SFX playback
|****************************************************************************

Echo_StopSFX:
    move.w  %d0, -(%sp)               | Save register
    move.b  #0x03, %d0                | Command 0x03 = stop SFX
    bsr     Echo_SendCommand        | Send command to Echo
    move.w  (%sp)+, %d0               | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_PlayBGM
| Plays a BGM
|
| input %a0.l ... Pointer to BGM data
|****************************************************************************

Echo_PlayBGM:
    move.w  %d0, -(%sp)               | Save register
    move.b  #0x04, %d0                | Command 0x04 = play BGM
    bsr     Echo_SendCommandAddr    | Send command to Echo
    move.w  (%sp)+, %d0               | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_StopBGM
| Stops BGM playback
|****************************************************************************

Echo_StopBGM:
    move.w  %d0, -(%sp)               | Save register
    move.b  #0x05, %d0                | Command 0x05 = stop BGM
    bsr     Echo_SendCommand        | Send command to Echo
    move.w  (%sp)+, %d0               | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_ResumeBGM
| Resumes BGM playback
|****************************************************************************

Echo_ResumeBGM:
    move.w  %d0, -(%sp)               | Save register
    move.b  #0x06, %d0                | Command 0x06 = resume BGM
    bsr     Echo_SendCommand        | Send command to Echo
    move.w  (%sp)+, %d0               | Restore register
    rts                             | End of subroutine

|****************************************************************************
| Echo_SetPCMRate
| Sets the playback rate of PCM
|
| input %d0.b ... New rate (timer A value)
|****************************************************************************

Echo_SetPCMRate:
    movem.l %d0-%d1, -(%sp)            | Save registers
    move.b  %d0, %d1                  | Put parameter in place
    move.b  #0x07, %d0                | Command 0x07 = set PCM rate
    bsr     Echo_SendCommandByte    | Send command to Echo
    movem.l (%sp)+, %d0-%d1            | Restore registers
    rts                             | End of subroutine

|****************************************************************************
| Echo_GetStatus
| Gets the current status of Echo
|
| output %d0.w ... Echo status
|                   Bit #0: SFX is playing
|                   Bit #1: BGM is playing
|                   Bit #15: command still not parsed
|****************************************************************************

Echo_GetStatus:
    moveq   #0, %d0
    Echo_Z80Request                 | We need the Z80 bus
    move.b  (0xA01FF0), %d0           | Get the status flags
    tst.b   (0xA01FFF)               | Check if command still has to be parsed
    beq.s   1f                | Any commands left to be parsed?
    bset.l  #15, %d0                 | If so, set the relevant flag
1:
    Echo_Z80Release                 | Let the Z80 go!
    rts                             | End of subroutine

|****************************************************************************
| Echo_ListEntry
| Defines an entry in a pointer list
|****************************************************************************

.macro Echo_ListEntry addr
|    dc.b    0x80|((\addr)>>8&0x7F)                 | High byte of address
|    dc.b    (\addr)&0xFF                          | Low byte of address
|    dc.b    ((\addr)>>15&0x7F)|((\addr)>>16&0x80)   | Bank number
.endm

|****************************************************************************
| Echo_ListEnd
| Ends a pointer list
|****************************************************************************

.macro Echo_ListEnd
    dc.b    0x00                     | End of list mark
    .even                            | Just in case...
.endm

|****************************************************************************
| Echo_Init
| Initializes Echo
|
| input %a0.l ... Address of pointer list
|****************************************************************************

Echo_Init:
    movem.l %d0/%a0-%a1, -(%sp)         | Save registers

    Echo_Z80Reset                   | May not work without this...
    Echo_Z80Request                 | We need the Z80 bus

    move.b  #0x01, (0xA01FFF)         | Command: load pointer list

    move.l  %a0, %d0                  | Easier to manipulate here
    move.b  %d0, (0xA01FFD)           | Store low address byte
    lsr.l   #7, %d0                  | Get high address byte
    lsr.b   #1, %d0                    | We skip one bit
    bset.l  #7, %d0                    | Point into bank window
    move.b  %d0, (0xA01FFE)           | Store high address byte
    lsr.w   #8, %d0                  | Get bank byte
    move.w  %d0, %d1                    | Parse 32X bit separately
    lsr.w   #1, %d1                    | Put 32X bit in place
    and.b   #0x7F, %d0                  | Filter out unused bit from addresses
    and.b   #0x80, %d1                  | Filter out all but 32X bit
    or.b    %d1, %d0                    | Put everything together
    move.b  %d0, (0xA01FFC)           | Store bank byte

    lea     Z80Program, %a0     | Where Z80 program starts
    lea     (0xA00000), %a1           | Where Z80 RAM starts
    move.w  Z80ProgSize-1, %d0     | Size of Z80 program (DBF adjusted)
LoadLoop:                          | Go through all the program
    move.b  (%a0)+, (%a1)+              | Copy byte into Z80 RAM
    dbf     %d0, LoadLoop             | Go for next byte

    Echo_Z80Reset                   | Now reset for real
    Echo_Z80Release                 | Let the Z80 go!

    movem.l (%sp)+, %d0/%a0-%a1         | Restore registers
    rts                             | End of subroutine

|****************************************************************************
| Echo Z80 program
| It should be located wherever Echo_ProgFile was defined
|****************************************************************************

Z80Program: .incbin "../built/prog-z80.bin"
EndOfZ80Program:
.equ Z80ProgSize, EndOfZ80Program-Z80Program
    .even
