|****************************************************************************
| LoadFont
| Loads the font in VRAM
|****************************************************************************

LoadFont:
    move.l  #0x40000000, (0xC00004)   | Where font will be stored

    lea     (Font), %a0             | Font data
    lea     (0xC00000), %a1           | VDP data port
    move.w  #96*16-1, %d7            | Go through all lines
1:
    move.b  (%a0)+, %d0               | Fetch next line
    moveq   #0, %d1                  | Initial color
    moveq   #8-1, %d6                | Go through all pixels
2:
    add.b   %d0, %d0                  | Get pixel color
    bcc.s   Transparent
    moveq   #3, %d1
Transparent:
    subq.b  #1, %d1
    bgt.s   NoUnderflow
    moveq   #0, %d1
NoUnderflow:

    lsl.l   #4, %d2                  | Make room for pixel
    or.b    %d1, %d2                  | Store pixel
    dbf     %d6, 2b              | Next pixel

    move.l  %d2, (%a1)                | Store line in VRAM
    dbf     %d7, 1b               | Next line

    rts                             | End of subroutine

Font:
    .incbin "../data/font.bin"

|****************************************************************************
| WriteString
| Writes a string on screen
|
| input %d0.w ... X coordinate
| input %d1.w ... Y coordinate
| input %d2.w ... FX and such
| input %a0.l ... String
|****************************************************************************

WriteString:
    movem.l %d0-%d2, -(%sp)            | Save registers

    lsl.w   #6, %d1                  | Calculate address
    add.w   %d1, %d0
    add.w   %d0, %d0

    and.l   #0xFFFF, %d0              | Tell VDP the address
    or.l    #0x00034000, %d0
    swap    %d0
    move.l  %d0, (0xC00004)

    lea     (0xC00000), %a5           | VDP data port
    moveq   #2-1, %d7                | Go through both lines
1:
    move.l  %a0, %a6
2:
    move.b  (%a6)+, %d1               | Get next character
    beq.s   3f                    | End of string?

    sub.b   #0x20, %d1                | Write tile in VRAM
    and.w   #0x7F, %d1
    add.w   %d1, %d1
    add.w   %d2, %d1
    move.w  %d1, (%a5)

    bra.s   2b                  | Next character

3:
    add.l   #0x80<<16, %d0
    move.l  %d0, (0xC00004)
    addq.w  #1, %d2                  | Next line
    dbf     %d7, 1b

    movem.l (%sp)+, %d0-%d2            | Restore registers
    rts                             | End of subroutine

|****************************************************************************
| ClearLines
| Clears the description lines
|****************************************************************************

ClearLines:
    move.l  #0x448E0003, %d0          | Initial position to clear
    lea     (0xC00004), %a0           | VDP control port
    lea     (0xC00000), %a1           | VDP data port

    moveq   #7-1, %d1                | Clear all lines
    moveq   #0, %d2
1:
    move.l  %d0, (%a0)
    .rept    26/2
    move.l  %d2, (%a1)
    .endr
    add.l   #0x80<<16, %d0
    dbf     %d1, 1b

    rts                             | End of subroutine
